import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.C4SRkA9c.js";const g=JSON.parse('{"title":"深浅拷贝","description":"","frontmatter":{},"headers":[],"relativePath":"前端/JS/对象/对象的深浅拷贝.md","filePath":"前端/JS/对象/对象的深浅拷贝.md","lastUpdated":1761188845000}'),h={name:"前端/JS/对象/对象的深浅拷贝.md"};function e(l,s,p,r,k,d){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="深浅拷贝" tabindex="-1">深浅拷贝 <a class="header-anchor" href="#深浅拷贝" aria-label="Permalink to &quot;深浅拷贝&quot;">​</a></h1><p>在 JavaScript/TypeScript 中，深拷贝与浅拷贝的区别主要体现在对引用类型数据的处理方式上。以下是具体分类和示例：</p><hr><h2 id="一、浅拷贝-shallow-copy" tabindex="-1"><strong>一、浅拷贝（Shallow Copy）</strong> <a class="header-anchor" href="#一、浅拷贝-shallow-copy" aria-label="Permalink to &quot;**一、浅拷贝（Shallow Copy）**&quot;">​</a></h2><p><strong>特点</strong>：仅复制对象的第一层属性，嵌套的引用类型仍共享内存地址。<br><strong>常见场景</strong>：</p><ol><li><p><strong>直接赋值</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: { c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> copy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 浅拷贝（实为引用传递）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">copy.b.c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原对象 obj.b.c 同步变为 3</span></span></code></pre></div></li><li><p><strong>扩展运算符（<code>...</code>）</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 浅拷贝</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">newArr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原数组 arr[1][0] 同步变为 99</span></span></code></pre></div></li><li><p><strong><code>Object.assign()</code></strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: { c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> copy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}, obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 浅拷贝</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">copy.b.c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;                       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原对象 obj.b.c 同步修改</span></span></code></pre></div></li><li><p><strong>数组方法（<code>slice()</code>、<code>concat()</code>）</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newArr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 浅拷贝</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">newArr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原数组同步修改</span></span></code></pre></div></li></ol><hr><h2 id="二、深拷贝-deep-copy" tabindex="-1"><strong>二、深拷贝（Deep Copy）</strong> <a class="header-anchor" href="#二、深拷贝-deep-copy" aria-label="Permalink to &quot;**二、深拷贝（Deep Copy）**&quot;">​</a></h2><p><strong>特点</strong>：递归复制所有层级的属性，新旧对象完全独立。<br><strong>常见场景</strong>：</p><ol><li><p><strong><code>JSON.parse(JSON.stringify())</code></strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: { c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> copy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 深拷贝</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">copy.b.c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;                                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原对象不受影响</span></span></code></pre></div><p><strong>局限性</strong>：忽略 <code>undefined</code>、<code>Symbol</code>、函数和循环引用。</p></li><li><p><strong>递归手动实现</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deepClone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> copy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    copy[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deepClone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj[key]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>第三方库（如 Lodash 的 <code>_.cloneDeep()</code>）</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lodash&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: { c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> copy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cloneDeep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 深拷贝</span></span></code></pre></div></li><li><p><strong><code>structuredClone()</code>（现代浏览器 API）</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: { c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> copy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> structuredClone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 深拷贝</span></span></code></pre></div><p><strong>支持</strong>：处理循环引用和更多数据类型（如 <code>Date</code>、<code>Map</code>）。</p></li></ol><hr><h2 id="三、对比总结" tabindex="-1"><strong>三、对比总结</strong> <a class="header-anchor" href="#三、对比总结" aria-label="Permalink to &quot;**三、对比总结**&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th>浅拷贝</th><th>深拷贝</th></tr></thead><tbody><tr><td><strong>复制层级</strong></td><td>仅第一层</td><td>所有嵌套层级</td></tr><tr><td><strong>内存占用</strong></td><td>低（共享引用）</td><td>高（独立内存）</td></tr><tr><td><strong>修改影响</strong></td><td>原对象可能被影响</td><td>原对象完全独立</td></tr><tr><td><strong>适用场景</strong></td><td>单层结构数据</td><td>多层嵌套或需隔离修改的数据</td></tr></tbody></table><hr><h2 id="四、特殊注意事项" tabindex="-1"><strong>四、特殊注意事项</strong> <a class="header-anchor" href="#四、特殊注意事项" aria-label="Permalink to &quot;**四、特殊注意事项**&quot;">​</a></h2><ul><li><strong>循环引用</strong>：浅拷贝无问题，深拷贝需特殊处理（如 <code>WeakMap</code> 缓存）。</li><li><strong>性能</strong>：深拷贝递归可能导致栈溢出，大数据量建议使用 <code>structuredClone</code> 或库函数。</li></ul><p>引用链接： 1.<a href="https://blog.csdn.net/2301_82023822/article/details/146922137" target="_blank" rel="noreferrer">JavaScript浅拷贝与深拷贝 - CSDN博客</a> 2.<a href="https://baijiahao.baidu.com/s?id=1833710914645027344&amp;wfr=spider&amp;for=pc" target="_blank" rel="noreferrer">JS深拷贝与浅拷贝 - 前端小巷子</a> 3.<a href="https://blog.csdn.net/m0_54069693/article/details/147207474" target="_blank" rel="noreferrer">JavaScript中的深拷贝与浅拷贝 - CSDN博客</a> 4.<a href="https://developer.aliyun.com/article/1523968" target="_blank" rel="noreferrer">总结JavaScript中的深拷贝与浅拷贝 - 阿里云开发者社区</a> 5.<a href="https://zhuanlan.zhihu.com/p/573905875" target="_blank" rel="noreferrer">js深拷贝、浅拷贝 - 晓晓</a> 6.<a href="https://blog.csdn.net/Dayunyun2019/article/details/147433009" target="_blank" rel="noreferrer">深拷贝和浅拷贝 - CSDN博客</a> 7.<a href="http://zhuanlan.zhihu.com/p/632321934" target="_blank" rel="noreferrer">浅拷贝和深拷贝及 JavaScript 实现 - 路漫漫</a> 8.<a href="https://blog.csdn.net/m0_46309087/article/details/136977628" target="_blank" rel="noreferrer">一文弄懂Javascript中的深拷贝和浅拷贝 - CSDN博客</a> 9.<a href="https://news.sina.cn/ai/2025-06-02/detail-ineysqxx7605855.d.html?ofcode=$ofcode" target="_blank" rel="noreferrer">面试京东,卡壳了。。 - 新浪新闻</a> 10.<a href="https://blog.csdn.net/RenGJ010617/article/details/139704285" target="_blank" rel="noreferrer">什么是深拷贝;深拷贝和浅拷贝有什么区别;深拷贝和浅拷贝有哪些方法(详解) - CSDN博客</a> 11.<a href="https://blog.csdn.net/wxdzuishaui/article/details/143324220" target="_blank" rel="noreferrer">深拷贝与浅拷贝 - CSDN博客</a> 12.<a href="https://blog.csdn.net/qq_37884031/article/details/148341545" target="_blank" rel="noreferrer">深拷贝与浅拷贝:理解与实现 - CSDN博客</a> 13.<a href="https://cloud.tencent.com/developer/article/2466544" target="_blank" rel="noreferrer">JS拷贝指南:浅拷贝与深拷贝详解 - 腾讯云</a> 14.<a href="https://juejin.cn/post/7478232629919842355" target="_blank" rel="noreferrer">深入理解JavaScript中数据拷贝机制——深拷贝与浅拷贝 - 掘金开发者社区</a> 15.<a href="https://developer.aliyun.com/article/1586669" target="_blank" rel="noreferrer">什么是深拷贝,什么是浅拷贝 - 阿里云开发者社区</a> 16.<a href="https://baijiahao.baidu.com/s?id=1769819906531064557&amp;wfr=spider&amp;for=pc" target="_blank" rel="noreferrer">百度一面:你来谈谈JS中的浅拷贝与深拷贝 - 尚硅谷教育</a> 17.<a href="https://zhuanlan.zhihu.com/p/17666282685" target="_blank" rel="noreferrer">JavaScript中深拷贝和浅拷贝 - 阿张</a> 18.<a href="https://blog.csdn.net/muguli2008/article/details/102734106" target="_blank" rel="noreferrer">JS深拷贝、浅拷贝 和 使用场景 详解 - CSDN博客</a> 19.<a href="https://developer.aliyun.com/article/1581597" target="_blank" rel="noreferrer">JavaScript中的深拷贝和浅拷贝的实现讲解-阿里云开发者社区 - 阿里云开发者社区</a> 20.<a href="https://cloud.tencent.com/developer/news/1266941" target="_blank" rel="noreferrer">js浅拷贝和深拷贝以及注意事项 - 腾讯云</a> 21.<a href="https://juejin.cn/post/7493386024878899251" target="_blank" rel="noreferrer">快速掌握JavaScript深拷贝与浅拷贝 - 掘金开发者社区</a> 22.<a href="https://baijiahao.baidu.com/s?id=1786308163719613973&amp;wfr=spider&amp;for=pc" target="_blank" rel="noreferrer">JS 之浅拷贝与深拷贝 - 文江博客</a> 23.<a href="https://cloud.tencent.com/developer/article/1380513" target="_blank" rel="noreferrer">JS基础知识总结(二):浅拷贝与深拷贝 - 腾讯云</a> 24.<a href="https://www.cnblogs.com/pansidong/p/18535044" target="_blank" rel="noreferrer">js 浅拷贝和深拷贝的区别和应用 - 博客园</a> 25.<a href="https://docs.pingcode.com/ask/61500.html" target="_blank" rel="noreferrer">JavaScript 拷贝的深拷贝和浅拷贝有什么区别 - PingCode</a> 26.<a href="http://baijiahao.baidu.com/s?id=1659200586023829219&amp;wfr=spider&amp;for=pc" target="_blank" rel="noreferrer">一文带你理解javascript中的浅拷贝和深拷贝 - 做一个编程俗人</a> 27.<a href="http://zhuanlan.zhihu.com/p/703144377" target="_blank" rel="noreferrer">JavaScript中的浅拷贝与深拷贝 - 参圣</a> 28.<a href="https://blog.csdn.net/weixin_48642777/article/details/142596613" target="_blank" rel="noreferrer">一篇文章彻底搞懂JavaScript中深拷贝和浅拷贝 - CSDN博客</a> 29.<a href="https://www.cnblogs.com/secretAngel/p/10188716.html" target="_blank" rel="noreferrer">JavaScript深浅拷贝区别 - 博客园</a> 30.<a href="https://juejin.cn/post/7490497276738977842" target="_blank" rel="noreferrer">JavaScript 对象拷贝:浅拷贝与深拷贝的差异、应用及实现 - 掘金开发者社区</a> 31.<a href="https://blog.csdn.net/Vivian_jay/article/details/58173041" target="_blank" rel="noreferrer">JavaScript深拷贝与浅拷贝的区别 - CSDN</a> 32.<a href="https://www.cnblogs.com/jscook/articles/15951507.html" target="_blank" rel="noreferrer">在Javascript中深拷贝和浅拷贝的使用场景及二者的区别 - 博客园</a></p>`,17)])])}const c=i(h,[["render",e]]);export{g as __pageData,c as default};
