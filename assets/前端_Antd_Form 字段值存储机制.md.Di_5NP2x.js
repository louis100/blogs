import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.C4SRkA9c.js";const g=JSON.parse('{"title":"原因说明一","description":"","frontmatter":{},"headers":[],"relativePath":"前端/Antd/Form 字段值存储机制.md","filePath":"前端/Antd/Form 字段值存储机制.md","lastUpdated":1761188845000}'),n={name:"前端/Antd/Form 字段值存储机制.md"};function l(h,s,r,k,p,d){return t(),a("div",null,[...s[0]||(s[0]=[e(`<blockquote><p>[tip] 提问： 如果没有name为“test”的Form.Item，通过formRef.setFieldValue(&quot;test&quot;, value);后，提交form时，没有拿到 test的值，但是formRef.setFieldValue([&quot;Units&quot;, name, &#39;UnitName&#39;], selectedItem?.title)设置后，却能拿到UnitName的值，这是为什么？</p></blockquote><h1 id="原因说明一" tabindex="-1">原因说明一 <a class="header-anchor" href="#原因说明一" aria-label="Permalink to &quot;原因说明一&quot;">​</a></h1><p>在 Ant Design Form 中，字段值的存储机制遵循 注册即管理 原则。这个现象的本质差异在于字段是否被表单实例注册管理：</p><h2 id="核心原因解析" tabindex="-1">核心原因解析 <a class="header-anchor" href="#核心原因解析" aria-label="Permalink to &quot;核心原因解析&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">场景</th><th style="text-align:center;">formRef.setFieldValue(&quot;test&quot;)</th><th style="text-align:center;">formRef.setFieldValue([&quot;Units&quot;, name, &#39;UnitName&#39;])</th></tr></thead><tbody><tr><td style="text-align:center;">字段注册状态</td><td style="text-align:center;">❌ 未通过任何 Form.Item 声明</td><td style="text-align:center;">✅ 通过 Form.List 结构隐式注册</td></tr><tr><td style="text-align:center;">数据存储机制</td><td style="text-align:center;">临时存储，提交时丢弃</td><td style="text-align:center;">持久化存储到表单状态树</td></tr><tr><td style="text-align:center;">数据结构匹配</td><td style="text-align:center;">平级字段需显式声明</td><td style="text-align:center;">嵌套字段自动合并到已有结构</td></tr></tbody></table><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><h3 id="方案一-显式声明字段-推荐" tabindex="-1">方案一：显式声明字段（推荐） <a class="header-anchor" href="#方案一-显式声明字段-推荐" aria-label="Permalink to &quot;方案一：显式声明字段（推荐）&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加对应的 Form.Item（即使隐藏）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form.Item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> noStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form.Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="方案二-动态注册字段" tabindex="-1">方案二：动态注册字段 <a class="header-anchor" href="#方案二-动态注册字段" aria-label="Permalink to &quot;方案二：动态注册字段&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 shouldUpdate 动态注册</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form.Item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shouldUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    form.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setFields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([{ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 动态注册字段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form.Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="方案三-提交时合并数据" tabindex="-1">方案三：提交时合并数据 <a class="header-anchor" href="#方案三-提交时合并数据" aria-label="Permalink to &quot;方案三：提交时合并数据&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onFinish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> allValues</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFieldsValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取所有字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">values, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">allValues });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h2 id="嵌套字段能正确获取的原理" tabindex="-1">嵌套字段能正确获取的原理 <a class="header-anchor" href="#嵌套字段能正确获取的原理" aria-label="Permalink to &quot;嵌套字段能正确获取的原理&quot;">​</a></h2><ol><li>当使用 [&quot;Units&quot;, name, &#39;UnitName&#39;] 路径时：</li></ol><ul><li>结构匹配：Form.List name=&quot;Units&quot; 已经创建了数组结构</li><li>自动扩展：Ant Design 会自动合并深层嵌套路径</li><li>类型推导：TS 类型系统会推断出 Units 是对象数组</li><li>表单数据结构示意图 （图示说明：嵌套字段会自动合并到已有结构）</li></ul><h2 id="最佳实践建议" tabindex="-1">最佳实践建议 <a class="header-anchor" href="#最佳实践建议" aria-label="Permalink to &quot;最佳实践建议&quot;">​</a></h2><ol><li>始终通过 Form.Item 声明字段 即使不需要显示控件，也应添加隐藏项：</li></ol><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form.Item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form.Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="2"><li>复杂结构使用 Form.List 对于动态数组字段，必须通过 Form.List 管理：</li></ol><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form.List</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Units&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fields.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form.Item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{[name, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;UnitName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form.Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ))}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form.List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="3"><li>调试技巧 使用以下方法检查表单状态：</li></ol><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(formRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFieldsValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取所有字段（包含未注册）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(formRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFieldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取单个字段</span></span></code></pre></div><p>通过遵循这些规则，可以确保表单数据管理的可靠性和一致性。</p><h1 id="原因说明二" tabindex="-1">原因说明二 <a class="header-anchor" href="#原因说明二" aria-label="Permalink to &quot;原因说明二&quot;">​</a></h1><p>在 Ant Design Form 中，<code>setFieldsValue</code> 的行为差异与表单字段的注册机制和数据结构密切相关。以下是具体原因分析：</p><hr><h3 id="_1-未注册字段无法收集数据" tabindex="-1"><strong>1. 未注册字段无法收集数据</strong> <a class="header-anchor" href="#_1-未注册字段无法收集数据" aria-label="Permalink to &quot;**1. 未注册字段无法收集数据**&quot;">​</a></h3><ul><li><strong><code>test</code> 字段未生效原因</strong>：<br> 若未在任意 <code>Form.Item</code> 中声明 <code>name=&quot;test&quot;</code>，则该字段未被注册到表单管理器中，即使通过 <code>setFieldsValue</code> 设置值，提交时也会被忽略。 <ul><li><strong>关键机制</strong>：Ant Design Form 仅收集已注册字段（即带有 <code>name</code> 的 <code>Form.Item</code>）的数据。</li></ul></li></ul><hr><h3 id="_2-嵌套字段的特殊处理" tabindex="-1"><strong>2. 嵌套字段的特殊处理</strong> <a class="header-anchor" href="#_2-嵌套字段的特殊处理" aria-label="Permalink to &quot;**2. 嵌套字段的特殊处理**&quot;">​</a></h3><ul><li><strong><code>[&quot;Units&quot;, name, &#39;UnitName&#39;]</code> 生效原因</strong>：<br> 当路径对应的嵌套字段结构中<strong>部分层级已被注册</strong>时，Ant Design 会动态合并未注册的子字段值。例如：<div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假设已注册 Units 的某一层级</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form.Item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Units&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name]} /&gt;</span></span></code></pre></div>此时通过 <code>setFieldsValue</code> 设置子字段 <code>UnitName</code>，会被合并到已注册的父字段数据中。</li></ul><hr><h3 id="_3-解决方案" tabindex="-1"><strong>3. 解决方案</strong> <a class="header-anchor" href="#_3-解决方案" aria-label="Permalink to &quot;**3. 解决方案**&quot;">​</a></h3><ul><li><strong>显式注册字段</strong>：<br> 确保所有需提交的字段均通过 <code>Form.Item</code> 的 <code>name</code> 属性注册：<div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Form.Item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ display: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }} /&gt;</span></span></code></pre></div></li><li><strong>动态嵌套字段</strong>：<br> 若需操作嵌套字段，至少注册父级路径（如 <code>name={[&quot;Units&quot;, name]}</code>），子字段可通过 <code>setFieldsValue</code> 动态添加。</li></ul><hr><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><p>未注册的字段（如 <code>test</code>）因未被表单管理器追踪而丢失数据，而嵌套字段（如 <code>UnitName</code>）通过已注册的父路径被动态合并。需通过显式注册或合理设计嵌套结构确保数据收集。</p><p>引用链接： 1.<a href="https://blog.csdn.net/m0_63788547/article/details/142923152" target="_blank" rel="noreferrer">antDesign Form.List下的Form.Item如何通过setFieldsValue设置值 - CSDN博客</a> 2.<a href="https://blog.csdn.net/sky_blue6/article/details/108155215" target="_blank" rel="noreferrer">标题antd Design Form setFieldsValue的使用 - CSDN博客</a> 3.<a href="https://github.com/ant-design/pro-components/issues/7418" target="_blank" rel="noreferrer">🧐[问题] 没有在FormItem中设置了name的属性,通过setFieldsValue后不会生效?? - GitHub</a> 4.<a href="https://juejin.cn/post/7388056946121162789" target="_blank" rel="noreferrer">Ant Design 表单陷阱:正确使用 Form.Item 与自定义表单控件 - 掘金开发者社区</a> 5.<a href="https://juejin.cn/post/7359877430340419647" target="_blank" rel="noreferrer">AntD 表单踩坑Form.Item相关 form.item 带上name的表示为受控组件,不能通过onChange直接 - 掘金 - 掘金开发者社区</a> 6.<a href="https://cloud.tencent.com/developer/article/2064075" target="_blank" rel="noreferrer">Antd 中 Form.Item name 属性不生效问题 - 腾讯云</a> 7.<a href="https://blog.51cto.com/u_16213642/13036143" target="_blank" rel="noreferrer">antd Descriptions编辑 - 51CTO博客</a> 8.<a href="https://ant.design/docs/react/faq-cn" target="_blank" rel="noreferrer">FAQ - Ant Design - ant.design</a> 9.<a href="https://ant-design.antgroup.com/components/form-cn" target="_blank" rel="noreferrer">表单Form - Ant Design - Ant</a> 10.<a href="https://antdv.com/components/form-cn" target="_blank" rel="noreferrer">Form 表单 - Ant Design Vue</a> 11.<a href="https://blog.csdn.net/jay_zhang_/article/details/130226044" target="_blank" rel="noreferrer">antd form.item下的组件无法使用value赋值 - CSDN博客</a> 12.<a href="https://blog.csdn.net/m0_62153576/article/details/146968707" target="_blank" rel="noreferrer">Antd Form 中的事件监听与表单验证 - CSDN博客</a> 13.<a href="https://ant-design.antgroup.com/docs/blog/form-names-cn" target="_blank" rel="noreferrer">封装Form.Item 实现数组转对象 - Ant</a> 14.<a href="https://www.jb51.net/javascript/2909465ch.htm" target="_blank" rel="noreferrer">ant-desigin-vue中form表单的使用解读 - 脚本之家</a> 15.<a href="https://zhuanlan.zhihu.com/p/53971780" target="_blank" rel="noreferrer">Ant-Design-组件-——-Form表单(二) - 广州芦苇科技web前端</a> 16.<a href="https://juejin.cn/post/7224121578124165178" target="_blank" rel="noreferrer">Ant Design 常见用法与坑点总结(二):Form 表单下拉框设置初始值 - 掘金开发者社区</a> 17.<a href="https://developer.aliyun.com/article/1399575" target="_blank" rel="noreferrer">ant-design 设置Form.Item中的input框的值的方法 - 阿里云开发者社区</a> 18.<a href="https://www.yisu.com/jc/839571.html" target="_blank" rel="noreferrer">如何使用AntDesign的Form.Item组件的name属性 - 亿速云计算</a> 19.<a href="https://www.cnblogs.com/steamed-twisted-roll/p/17055852.html" target="_blank" rel="noreferrer">ant-design动态增减 form 表单 - 博客园</a> 20.<a href="https://cloud.tencent.com/developer/ask/sof/106480576/answer/105228419" target="_blank" rel="noreferrer">ant设计-使用Form.setFieldsValue更新Form.Item中复选框的检查值 - 腾讯云</a></p>`,38)])])}const E=i(n,[["render",l]]);export{g as __pageData,E as default};
