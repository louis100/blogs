import{_ as l,c as o,o as t,ag as i}from"./chunks/framework.C4SRkA9c.js";const u=JSON.parse('{"title":"jeecgboot 如何能使部署后与本地开发环境开发时各功能一样","description":"","frontmatter":{},"headers":[],"relativePath":"Java/JeecgBoot/如何部署保证与开发环境相同.md","filePath":"Java/JeecgBoot/如何部署保证与开发环境相同.md","lastUpdated":1761188845000}'),a={name:"Java/JeecgBoot/如何部署保证与开发环境相同.md"};function r(_,e,c,p,s,n){return t(),o("div",null,[...e[0]||(e[0]=[i('<h1 id="jeecgboot-如何能使部署后与本地开发环境开发时各功能一样" tabindex="-1">jeecgboot 如何能使部署后与本地开发环境开发时各功能一样 <a class="header-anchor" href="#jeecgboot-如何能使部署后与本地开发环境开发时各功能一样" aria-label="Permalink to &quot;jeecgboot 如何能使部署后与本地开发环境开发时各功能一样&quot;">​</a></h1><p>为了确保JeecgBoot部署后与本地开发环境功能一致，您可以按照以下步骤进行设置和配置：</p><ol><li>打包和部署：</li></ol><ul><li>确保JeecgBoot项目采用war包打包方案。项目根目录的pom.xml文件需要设置为war格式，并删除spring-boot-maven-plugin插件。</li><li>打包之前，注释掉WebSocketConfig中的ServerEndpointExporter注册方法。</li></ul><ol><li>配置文件调整：</li></ol><ul><li>修改application-prod.yml文件以适应生产环境需求，包括数据库连接、缓存Redis配置，以及附件上传配置。</li><li>确保切换到生产模式进行打包。</li></ul><ol start="3"><li>启动服务：</li></ol><ul><li>启动所需的服务组件，包括jeecg-demo、jeecg-system、gateway等，确保所有必须服务组件正常运行。</li></ul><ol start="4"><li>前端配置：</li></ol><ul><li>修改.env.development文件中的接口地址为网关地址，确保前端能够正确对接后台服务。</li><li>启动Vue3前端项目后，通过http://localhost:3100访问前端界面。</li></ul><ol start="5"><li>部署至BCS-AppServer：</li></ol><ul><li>启动BCS-AppServer，通过控制台进行应用管理和部署。</li><li>上传本地打包好的war包，并进行应用部署。</li></ul><ol start="6"><li>访问系统：</li></ol><ul><li>部署完成后，通过http://[服务器ip]:[应用端口]/访问JeecgBoot系统，确保所有功能与本地开发环境一致。</li></ul><p>通过以上步骤，您可以确保JeecgBoot在部署后的各项功能与本地开发环境保持一致。</p>',15)])])}const g=l(a,[["render",r]]);export{u as __pageData,g as default};
