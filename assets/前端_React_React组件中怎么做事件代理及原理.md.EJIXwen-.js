import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.C4SRkA9c.js";const g=JSON.parse('{"title":"React组件中怎么做事件代理及原理","description":"","frontmatter":{},"headers":[],"relativePath":"前端/React/React组件中怎么做事件代理及原理.md","filePath":"前端/React/React组件中怎么做事件代理及原理.md","lastUpdated":1761188845000}'),n={name:"前端/React/React组件中怎么做事件代理及原理.md"};function e(h,s,p,k,d,E){return t(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="react组件中怎么做事件代理及原理" tabindex="-1">React组件中怎么做事件代理及原理 <a class="header-anchor" href="#react组件中怎么做事件代理及原理" aria-label="Permalink to &quot;React组件中怎么做事件代理及原理&quot;">​</a></h1><p>在 React 组件中实现事件代理主要通过合成事件（SyntheticEvent）系统完成，其原理和实现方式如下：</p><h2 id="一、如何实现事件代理" tabindex="-1">一、如何实现事件代理 <a class="header-anchor" href="#一、如何实现事件代理" aria-label="Permalink to &quot;一、如何实现事件代理&quot;">​</a></h2><ol><li>父元素监听</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通过 e.target 识别被点击的子元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.target.tagName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;LI&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;点击了子元素:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.target.textContent);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{handleClick}&gt; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	{</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 事件绑定在父级 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Item 1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Item 2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>动态子元素标识</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过 dataset 存储标识</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{item.id} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{handleClick}&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {item.text}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="二、核心原理" tabindex="-1">二、核心原理 <a class="header-anchor" href="#二、核心原理" aria-label="Permalink to &quot;二、核心原理&quot;">​</a></h2><ol><li>事件池机制</li></ol><ul><li>React 使用单个 SyntheticEvent 对象池复用事件对象</li><li>通过 event.persist() 可保留事件引用（异步场景需要）</li></ul><ol start="2"><li>委托层级变化</li></ol><ul><li>React 16：委托到 document</li><li>React 17+：委托到 React 树根 DOM 节点</li></ul><ol start="3"><li>自动绑定管理</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// React 自动处理真实的事件绑定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(eventType, dispatchEvent);</span></span></code></pre></div><ol start="4"><li>性能优化</li></ol><ul><li>仅在最外层绑定少量事件监听器</li><li>根据事件类型自动选择捕获/冒泡阶段</li></ul><h2 id="三、原生-vs-react-事件代理" tabindex="-1">三、原生 vs React 事件代理 <a class="header-anchor" href="#三、原生-vs-react-事件代理" aria-label="Permalink to &quot;三、原生 vs React 事件代理&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">原生 DOM</th><th style="text-align:left;">React</th></tr></thead><tbody><tr><td style="text-align:left;">绑定方式</td><td style="text-align:left;">手动 addEventListener</td><td style="text-align:left;">自动处理</td></tr><tr><td style="text-align:left;">事件对象</td><td style="text-align:left;">原生 Event</td><td style="text-align:left;">SyntheticEvent</td></tr><tr><td style="text-align:left;">冒泡控制</td><td style="text-align:left;">stopPropagation</td><td style="text-align:left;">e.stopPropagation()</td></tr><tr><td style="text-align:left;">默认行为阻止</td><td style="text-align:left;">preventDefault</td><td style="text-align:left;">e.preventDefault()</td></tr><tr><td style="text-align:left;">事件移除</td><td style="text-align:left;">需手动移除</td><td style="text-align:left;">自动解绑</td></tr></tbody></table><h2 id="四、注意事项" tabindex="-1">四、注意事项 <a class="header-anchor" href="#四、注意事项" aria-label="Permalink to &quot;四、注意事项&quot;">​</a></h2><ol><li>事件传播差异</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原生事件会先于 React 事件触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;原生事件先触发&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><ol start="2"><li>混用场景处理</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.nativeEvent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopImmediatePropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 阻止其他原生监听器</span></span></code></pre></div><ol start="3"><li>Portal 组件事件</li></ol><ul><li>仍可通过 React 事件系统冒泡</li><li>与 DOM 树位置无关</li></ul><p>通过这种设计，React 实现了：</p><ul><li>跨浏览器一致性</li><li>自动内存管理</li><li>高效的事件处理</li><li>更简洁的组件写法</li></ul>`,27)])])}const c=i(n,[["render",e]]);export{g as __pageData,c as default};
